# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import google.generativeai as genai
from tenacity import retry, stop_after_attempt, wait_exponential
from PIL import Image

# --- Configuration ---
# Paste your API Key from Google AI Studio here.
# IMPORTANT: Do not share this file publicly with your key in it.
API_KEY = "AIzaSyAwUpeiijWQDPzWuWf_D0YVl90qrb_q6aY"

try:
    if API_KEY == "AIzaSyAwUpeiijWQDPzWuWf_D0YVl90qrb_q6aY" or not API_KEY:
        raise ValueError("API_KEY not set. Please paste your key from aistudio.google.com/app/apikey in agent.py")
    genai.configure(api_key=API_KEY)
except Exception as e:
    print(f"Error configuring Google AI: {e}")

# --- Model Initialization ---
# Use a model that supports multimodal input (text and images)
model = genai.GenerativeModel('gemini-1.5-pro-latest')

# --- Core Functions ---

@retry(
    wait=wait_exponential(multiplier=1, min=2, max=60), # Wait 2s, then 4s, up to 60s
    stop=stop_after_attempt(5), # Try a maximum of 5 times
    reraise=True # If all retries fail, raise the last exception
)
def generate_with_retry(prompt_parts):
    """Wrapper function to call the API with automatic retries on failure."""
    return model.generate_content(prompt_parts)


def extract_code_from_content(uploaded_file) -> str:
    """
    Sends the uploaded file content to the Gemini model to extract code.
    """
    if uploaded_file is None:
        return "# Error: No file provided."

    # The prompt now includes the actual image or file data
    prompt_parts = [
        "You are an expert at analyzing images and documents to extract programming code. "
        "Look at the following file and extract any code you find. Return only the raw code.",
        Image.open(uploaded_file) # This handles images. PDF/video requires other libraries
    ]
    
    try:
        response = generate_with_retry(prompt_parts)
        return response.text
    except Exception as e:
        print(f"Error during code extraction after retries: {e}")
        return f"# Error generating code: {e}"


def improve_code(code_to_improve: str) -> str:
    """
    Generates a prompt to improve code and calls the Gemini model.

    Args:
        code_to_improve: A string containing the code to be improved.

    Returns:
        A string containing the improved code generated by the model.
    """
    prompt = (
        "You are an expert code reviewer and optimizer. Your task is to improve the following "
        f"code snippet by fixing any errors, improving readability, and adding comments. "
        "Return only the improved, raw code. Do not include any explanation.\n\n"
        f"Here is the code to improve:\n```python\n{code_to_improve}\n```"
    )

    try:
        response = generate_with_retry(prompt)
        return response.text
    except Exception as e:
        print(f"Error during code improvement after retries: {e}")
        return f"# Error improving code: {e}" 